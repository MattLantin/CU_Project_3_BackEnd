# Basic flask app to provide an API for the surgery cost dataset# Dataset: https://data.world/dmikebishop/surgery-charges-across-the-u-s# DRG Difinition: https://www.verywellhealth.com/drg-101-what-is-a-drg-how-does-it-work-3916755# @author Nathan Stevens# @version 1.0# Import the dependencies.from sqlalchemy import create_engine, textfrom flask import Flask, render_template################################################## Database Setup, either sqlite or postgresql##################################################engine = create_engine("sqlite:///../Data/SurgeryCharges.sqlite3")engine = create_engine('postgresql+psycopg2://ns96:java100@localhost/SurgeryCharges')################################################## Flask Setup#################################################app = Flask(__name__)################################################## Flask Routes#################################################@app.route("/")def welcome():    """List all available api routes."""        return (        f"Available Routes:<br/><br>"        f"/api/v1.0/drg/&lt;drg_id&gt;<br/>"        f"/api/v1.0/state/&lt;state abbriviation&gt;<br>"        f"/api/v1.0/definitions/&lt;category&gt;<br>"        f"/api/v1.0/providers<br>"        f"/api/v1.0/providers/&lt;STATE&gt;<br>"    )@app.route("/api/v1.0/drg/<drg_id>")def drg_all(drg_id):    """    Return the drg data for all the states    """    query = text('SELECT "Provider State", COUNT(*), SUM("Total Discharges"), '\                 'AVG("Average Total Payments"), AVG("Average Medicare Payments") '\                 'FROM "DRG_RECORDS" '\                 'INNER JOIN "PROVIDERS" '\                 'ON "PROVIDERS"."Provider Id" = "DRG_RECORDS"."Provider Id" '\                 'WHERE "DRG Id" = ' + drg_id + ' '\                 'GROUP BY "Provider State"')    print(query)        with engine.connect() as conn:      results = conn.execute(query)        records = dict()        for row in results:      record = dict()      record["state"] = row[0]      record["count"] = row[1]      record["discharges"] = row[2]      record["avg_payments"] = int(row[3])      record["avg_medicare"] = int(row[4])      record["avg_difference"] = int(row[3] - row[4])            # calcuate the percent medicare payments      pct = int((row[4]/row[3])*100)      record["pct_medicare"] = pct            records[row[0]] = record # add to dictionary        return records@app.route("/api/v1.0/state/<state>")def drg_state(state):    """    Return the drg data for a particular state    """        pass@app.route("/api/v1.0/definitions/<category>")def drg_definitions(category):    """     Return the drg definitions for a particular category    """    query = text("SELECT * FROM \"DRG\" WHERE \"Category\" = " + "'" + category + "'")    print(query)    with engine.connect() as conn:      results = conn.execute(query)        definitions = []    for row in results:      definition = dict()      definition["value"] = row[0]      definition["text"] = row[1]      definitions.append(definition)        return definitions@app.route("/api/v1.0/categories")def drg_categories():    """     Return the drg contegories    """    query = text('SELECT DISTINCT "Category" FROM "DRG"')    print(query)    with engine.connect() as conn:      results = conn.execute(query)        categories = []    for row in results:      categories.append(row[0])        return categories@app.route("/api/v1.0/providers")def providers():    """    Return the list of all providers nation wide    """        pass@app.route("/api/v1.0/providers/<state>")def providers_in_state(state):    """    Return the providers for all a particular state    """        pass@app.route("/view")def view_ui():    """    Return the html page to view basic site UI    """        version = "v1.0.0"    year = "2014"    return render_template('index.html', version=version, year=year)# start the application if it running in the console on port 5015 so localhost# works on newer macsif __name__ == '__main__':    app.run(debug=True, port=5015)